// Controle de sessÃµes simples em memÃ³ria
const sessions: Record<string, { lastMessage: string }> = {};

const responses = {
  greeting: ['olÃ¡', 'oi', 'bom dia', 'boa tarde', 'boa noite'],
  help: ['ajuda', 'socorro', 'informaÃ§Ã£o'],
  goodbye: ['tchau', 'atÃ© logo', 'atÃ© mais'],
};

// Agora a funÃ§Ã£o recebe tambÃ©m o sessionId
export function processUserMessage(message: string, sessionId: string): string {
  if (!sessionId) {
    return 'SessÃ£o invÃ¡lida. Por favor, forneÃ§a um ID de sessÃ£o.';
  }

  const msg = message.toLowerCase();

  // Inicializa a sessÃ£o se ainda nÃ£o existir
  if (!sessions[sessionId]) {
    sessions[sessionId] = { lastMessage: '' };
  }

  // Atualiza o Ãºltimo texto enviado nessa sessÃ£o
  sessions[sessionId].lastMessage = message;

  // LÃ³gica de resposta
  if (responses.greeting.some(word => msg.includes(word))) {
    return 'OlÃ¡! ğŸ‘‹ Como posso ajudar vocÃª?';
  }
  if (responses.help.some(word => msg.includes(word))) {
    return 'Claro! Estou aqui para ajudar. Me diga sua dÃºvida!';
  }
  if (responses.goodbye.some(word => msg.includes(word))) {
    return 'Tchau! ğŸ‘‹ AtÃ© a prÃ³xima!';
  }
  if (msg.includes('histÃ³rico')) {
    return `VocÃª me disse antes: "${sessions[sessionId].lastMessage}"`;
  }

  return 'Desculpe, ainda estou aprendendo a responder isso. ğŸ˜Š';
}
